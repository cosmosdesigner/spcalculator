{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","percentageWeight","useState","value","setValue","sumOfAllFactors","name","type","tempo","toString","onChange","e","target","parseInt","complexidade","risco","handleSum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAkDeA,MA9Cf,WACE,IAAMC,EAAmB,IADZ,EAEaC,mBAAS,CAAE,MAAS,EAAG,aAAgB,EAAG,MAAS,IAFhE,mBAENC,EAFM,KAECC,EAFD,KAGTC,EAAkB,EAkBtB,OACE,gCACE,yDACA,qGAAiE,uBAAjE,IAAwE,sCAAxE,KAAsF,6CAAtF,MAA4G,mDAC5G,uBACA,iCACE,0CAEE,uBAAOC,KAAK,QAAQC,KAAK,OAAOJ,MAAOA,EAAMK,MAAMC,WAAYC,SAAU,SAACC,GAAD,OAAOP,EAAS,2BAAKD,GAAN,kBAAcQ,EAAEC,OAAON,KAA0B,KAAnBK,EAAEC,OAAOT,MAAeU,SAASF,EAAEC,OAAOT,OAASU,SAAS,YAC5K,uBAJV,IAIiB,uBACf,iDAEE,uBAAOP,KAAK,eAAeC,KAAK,OAAOJ,MAAOA,EAAMW,aAAaL,WAAYC,SAAU,SAACC,GAAD,OAAOP,EAAS,2BAAKD,GAAN,kBAAcQ,EAAEC,OAAON,KAA0B,KAAnBK,EAAEC,OAAOT,MAAeU,SAASF,EAAEC,OAAOT,OAASU,SAAS,YAElM,uBATF,IASS,uBACP,sDAEE,uBAAOP,KAAK,QAAQC,KAAK,OAAOJ,MAAOA,EAAMY,MAAMN,WAAYC,SAAU,SAACC,GAAD,OAAOP,EAAS,2BAAKD,GAAN,kBAAcQ,EAAEC,OAAON,KAA0B,KAAnBK,EAAEC,OAAOT,MAAeU,SAASF,EAAEC,OAAOT,OAASU,SAAS,eAGtL,4BAnCJ,WAEE,OADAR,EAA8H,IAA3GF,EAAMK,MAAQP,EAAmBE,EAAMW,aAAeb,EAAmBE,EAAMY,MAAQd,IAClG,GACN,KAAKI,EAAkB,GAAKA,EAAkB,GAAI,OAAO,EACzD,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,GAC1D,KAAKA,EAAkB,IAAMA,EAAkB,IAAK,OAAO,GAC3D,QAAS,OAAO,GAyBZW,SCjCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.85990901.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  const percentageWeight = 0.33;\n  const [value, setValue] = useState({ 'tempo': 0, 'complexidade': 0, 'risco': 0 });\n  var sumOfAllFactors = 0;\n\n\n  function handleSum() {\n    sumOfAllFactors = (value.tempo * percentageWeight + value.complexidade * percentageWeight + value.risco * percentageWeight) * 10\n    switch (true) {\n      case sumOfAllFactors > 0 && sumOfAllFactors < 15: return 1\n      case sumOfAllFactors > 15 && sumOfAllFactors < 30: return 2\n      case sumOfAllFactors > 30 && sumOfAllFactors < 45: return 3\n      case sumOfAllFactors > 45 && sumOfAllFactors < 60: return 5\n      case sumOfAllFactors > 60 && sumOfAllFactors < 75: return 8\n      case sumOfAllFactors > 75 && sumOfAllFactors < 90: return 13\n      case sumOfAllFactors > 90 && sumOfAllFactors < 100: return 21\n      default: return 0\n    }\n  };\n\n\n  return (\n    <div>\n      <h1>Story points Calculator</h1>\n      <p>Os story points são medidas de esforço, baseadas em 3 pilares,<br /> <b>Tempo</b>, <b>Complexidade</b> e <b>Risco/Incerteza</b></p>\n      <br />\n      <form>\n        <label>\n          Tempo\n          <input name='tempo' type=\"text\" value={value.tempo.toString()} onChange={(e) => setValue({ ...value, [e.target.name]: e.target.value !== '' ? parseInt(e.target.value) : parseInt(0) })} />\n        </label><br /> <br />\n        <label>\n          Complexidade\n          <input name='complexidade' type=\"text\" value={value.complexidade.toString()} onChange={(e) => setValue({ ...value, [e.target.name]: e.target.value !== '' ? parseInt(e.target.value) : parseInt(0) })} />\n        </label>\n        <br /> <br />\n        <label>\n          Risco / Incerteza\n          <input name='risco' type=\"text\" value={value.risco.toString()} onChange={(e) => setValue({ ...value, [e.target.name]: e.target.value !== '' ? parseInt(e.target.value) : parseInt(0) })} />\n        </label>\n      </form>\n      <p>{handleSum()}</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}