{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","percentageWeight","useState","value","setValue","sp","setSp","sumOfAllFactors","valuetext","handleChange","e","target","ariaLabel","ariaValueText","className","Typography","gutterBottom","Slider","aria-label","defaultValue","getAriaValueText","onChange","step","marks","min","max","valueLabelDisplay","Button","variant","color","onClick","tempo","complexidade","risco","calculateMySp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRA8GeA,MApGf,WACE,IAAMC,EAAmB,IADZ,EAEaC,mBAAS,CAAE,MAAS,EAAG,aAAgB,EAAG,MAAS,IAFhE,mBAENC,EAFM,KAECC,EAFD,OAGOF,mBAAS,GAHhB,mBAGNG,EAHM,KAGFC,EAHE,KAITC,EAAkB,EAEtB,SAASC,EAAUL,GACjB,MAAM,GAAN,OAAUA,GAGZ,SAASM,EAAaC,GACpBN,EAAS,2BAAKD,GAAN,kBAAcO,EAAEC,OAAOC,UAAYF,EAAEC,OAAOE,iBA+BtD,OACE,sBAAKC,UAAU,YAAf,UACE,yDACA,qGAAiE,uBAAjE,IAAwE,sCAAxE,KAAsF,6CAAtF,MAA4G,mDAC5G,sKACA,uBACA,cAACC,EAAA,EAAD,CAAYC,cAAY,EAAxB,mBAGA,cAACC,EAAA,EAAD,CACEC,aAAW,QACXC,aAAc,EACdC,iBAAkBZ,EAClBa,SAAUZ,EACVa,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,GACLC,kBAAkB,SAEpB,cAACX,EAAA,EAAD,CAAYC,cAAY,EAAxB,0BAGA,cAACC,EAAA,EAAD,CACEC,aAAW,eACXC,aAAc,EACdC,iBAAkBZ,EAClBa,SAAUZ,EACVa,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,GACLC,kBAAkB,SAEpB,cAACX,EAAA,EAAD,CAAYC,cAAY,EAAxB,+BAGA,cAACC,EAAA,EAAD,CACEC,aAAW,QACXC,aAAc,EACdC,iBAAkBZ,EAClBa,SAAUZ,EACVa,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,GACLC,kBAAkB,SAEpB,uBACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBA/DzD,WAEE,OADAvB,EAA8H,IAA3GJ,EAAM4B,MAAQ9B,EAAmBE,EAAM6B,aAAe/B,EAAmBE,EAAM8B,MAAQhC,IAClG,GACN,KAAKM,EAAkB,GAAKA,EAAkB,GAAID,EAAM,GAAI,MAC5D,KAAKC,EAAkB,IAAMA,EAAkB,GAAID,EAAM,GAAI,MAC7D,KAAKC,EAAkB,IAAMA,EAAkB,GAAID,EAAM,GAAI,MAC7D,KAAKC,EAAkB,IAAMA,EAAkB,GAAID,EAAM,GAAI,MAC7D,KAAKC,EAAkB,IAAMA,EAAkB,GAAID,EAAM,GAAI,MAC7D,KAAKC,EAAkB,IAAMA,EAAkB,GAAID,EAAM,IAAK,MAC9D,KAAKC,EAAkB,IAAMA,EAAkB,IAAKD,EAAM,IAAK,MAC/D,QAAS,OAAO,GAqD0C4B,IAA1D,qCAGA,+CAAiB,mBAAGpB,UAAU,UAAb,SAAwBT,OACzC,4IC7FS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3d2522b.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\n\nimport './style/main.css'\n\n\nfunction App() {\n  const percentageWeight = 0.33;\n  const [value, setValue] = useState({ 'tempo': 0, 'complexidade': 0, 'risco': 0 });\n  const [sp, setSp] = useState(0);\n  var sumOfAllFactors = 0;\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  function handleChange(e) {\n    setValue({ ...value, [e.target.ariaLabel]: e.target.ariaValueText })\n  }\n  \n  // useEffect(() => {\n  //   sumOfAllFactors = (value.tempo * percentageWeight + value.complexidade * percentageWeight + value.risco * percentageWeight) * 10;\n  //   switch (true) {\n  //     case sumOfAllFactors > 0 && sumOfAllFactors < 15: setSp(1); break;\n  //     case sumOfAllFactors > 15 && sumOfAllFactors < 30: setSp(2); break;\n  //     case sumOfAllFactors > 30 && sumOfAllFactors < 45: setSp(3); break;\n  //     case sumOfAllFactors > 45 && sumOfAllFactors < 60: setSp(5); break;\n  //     case sumOfAllFactors > 60 && sumOfAllFactors < 75: setSp(8); break;\n  //     case sumOfAllFactors > 75 && sumOfAllFactors < 90: setSp(13); break;\n  //     case sumOfAllFactors > 90 && sumOfAllFactors < 100: setSp(21); break;\n  //     default: return 0\n  //   }\n  // },[value]);\n\n  function calculateMySp(){\n    sumOfAllFactors = (value.tempo * percentageWeight + value.complexidade * percentageWeight + value.risco * percentageWeight) * 10;\n    switch (true) {\n      case sumOfAllFactors > 0 && sumOfAllFactors < 15: setSp(1); break;\n      case sumOfAllFactors > 15 && sumOfAllFactors < 30: setSp(2); break;\n      case sumOfAllFactors > 30 && sumOfAllFactors < 45: setSp(3); break;\n      case sumOfAllFactors > 45 && sumOfAllFactors < 60: setSp(5); break;\n      case sumOfAllFactors > 60 && sumOfAllFactors < 75: setSp(8); break;\n      case sumOfAllFactors > 75 && sumOfAllFactors < 90: setSp(13); break;\n      case sumOfAllFactors > 90 && sumOfAllFactors < 100: setSp(21); break;\n      default: return 0\n    }\n  }\n\n  return (\n    <div className='container'>\n      <h1>Story points Calculator</h1>\n      <p>Os story points são medidas de esforço, baseadas em 3 pilares,<br /> <b>Tempo</b>, <b>Complexidade</b> e <b>Risco/Incerteza</b></p>\n      <p>Cada pilar esta dividido de 0 a 10, desliza até ao valor que achas que será a tua User Story, e terás a estimativa da tua US</p>\n      <br />\n      <Typography gutterBottom>\n        Tempo\n      </Typography>\n      <Slider\n        aria-label='tempo'\n        defaultValue={0}\n        getAriaValueText={valuetext}\n        onChange={handleChange}\n        step={1}\n        marks\n        min={0}\n        max={10}\n        valueLabelDisplay=\"auto\"\n      />\n      <Typography gutterBottom>\n        Complexidade\n      </Typography>\n      <Slider\n        aria-label='complexidade'\n        defaultValue={0}\n        getAriaValueText={valuetext}\n        onChange={handleChange}\n        step={1}\n        marks\n        min={0}\n        max={10}\n        valueLabelDisplay=\"auto\"\n      />\n      <Typography gutterBottom>\n        Risco / Incerteza\n      </Typography>\n      <Slider\n        aria-label='risco'\n        defaultValue={0}\n        getAriaValueText={valuetext}\n        onChange={handleChange}\n        step={1}\n        marks\n        min={0}\n        max={10}\n        valueLabelDisplay=\"auto\"\n      />\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={()=> calculateMySp()}>\n Give me my Story Points\n</Button>\n      <p>Story Points: <b className=\"spValue\">{sp}</b></p>\n      <small>Cada pilar tem o mesmo valor e estamos a limitar as estimativas até 21, com a regra de Fibonacci</small>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}