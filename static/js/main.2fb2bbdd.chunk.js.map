{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","percentageWeight","useState","value","setValue","sumOfAllFactors","valuetext","handleChange","e","target","ariaLabel","ariaValueText","className","Typography","gutterBottom","Slider","aria-label","defaultValue","getAriaValueText","onChange","step","marks","min","max","valueLabelDisplay","tempo","complexidade","risco","handleSum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QA8FeA,MArFf,WACE,IAAMC,EAAmB,IADZ,EAEaC,mBAAS,CAAE,MAAS,EAAG,aAAgB,EAAG,MAAS,IAFhE,mBAENC,EAFM,KAECC,EAFD,KAGTC,EAAkB,EAEtB,SAASC,EAAUH,GACjB,MAAM,GAAN,OAAUA,GAGZ,SAASI,EAAaC,GACpBJ,EAAS,2BAAKD,GAAN,kBAAcK,EAAEC,OAAOC,UAAYF,EAAEC,OAAOE,iBAoBtD,OACE,sBAAKC,UAAU,YAAf,UACE,yDACA,qGAAiE,uBAAjE,IAAwE,sCAAxE,KAAsF,6CAAtF,MAA4G,mDAC5G,sKACA,uBACA,cAACC,EAAA,EAAD,CAAYC,cAAY,EAAxB,mBAGA,cAACC,EAAA,EAAD,CACEC,aAAW,QACXC,aAAc,EACdC,iBAAkBZ,EAClBa,SAAUZ,EACVa,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,GACLC,kBAAkB,SAEpB,cAACX,EAAA,EAAD,CAAYC,cAAY,EAAxB,0BAGA,cAACC,EAAA,EAAD,CACEC,aAAW,eACXC,aAAc,EACdC,iBAAkBZ,EAClBa,SAAUZ,EACVa,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,GACLC,kBAAkB,SAEpB,cAACX,EAAA,EAAD,CAAYC,cAAY,EAAxB,+BAGA,cAACC,EAAA,EAAD,CACEC,aAAW,QACXC,aAAc,EACdC,iBAAkBZ,EAClBa,SAAUZ,EACVa,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,GACLC,kBAAkB,SAEpB,uBACA,+CAAiB,mBAAGZ,UAAU,UAAb,SAhErB,WAEE,OADAP,EAA8H,IAA3GF,EAAMsB,MAAQxB,EAAmBE,EAAMuB,aAAezB,EAAmBE,EAAMwB,MAAQ1B,IAClG,GACN,KAAKI,EAAkB,GAAKA,EAAkB,GAAI,OAAO,EACzD,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,EAC1D,KAAKA,EAAkB,IAAMA,EAAkB,GAAI,OAAO,GAC1D,KAAKA,EAAkB,IAAMA,EAAkB,IAAK,OAAO,GAC3D,QAAS,OAAO,GAsDyBuB,QACzC,4IC7ESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2fb2bbdd.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nimport './style/main.css'\n\nfunction App() {\n  const percentageWeight = 0.33;\n  const [value, setValue] = useState({ 'tempo': 0, 'complexidade': 0, 'risco': 0 });\n  var sumOfAllFactors = 0;\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  function handleChange(e) {\n    setValue({ ...value, [e.target.ariaLabel]: e.target.ariaValueText })\n    \n  }\n\n\n  function handleSum() {\n    sumOfAllFactors = (value.tempo * percentageWeight + value.complexidade * percentageWeight + value.risco * percentageWeight) * 10\n    switch (true) {\n      case sumOfAllFactors > 0 && sumOfAllFactors < 15: return 1\n      case sumOfAllFactors > 15 && sumOfAllFactors < 30: return 2\n      case sumOfAllFactors > 30 && sumOfAllFactors < 45: return 3\n      case sumOfAllFactors > 45 && sumOfAllFactors < 60: return 5\n      case sumOfAllFactors > 60 && sumOfAllFactors < 75: return 8\n      case sumOfAllFactors > 75 && sumOfAllFactors < 90: return 13\n      case sumOfAllFactors > 90 && sumOfAllFactors < 100: return 21\n      default: return 0\n    }\n  };\n\n\n  return (\n    <div className='container'>\n      <h1>Story points Calculator</h1>\n      <p>Os story points são medidas de esforço, baseadas em 3 pilares,<br /> <b>Tempo</b>, <b>Complexidade</b> e <b>Risco/Incerteza</b></p>\n      <p>Cada pilar esta dividido de 0 a 10, desliza até ao valor que achas que será a tua User Story, e terás a estimativa da tua US</p>\n      <br />\n      <Typography gutterBottom>\n        Tempo\n      </Typography>\n      <Slider\n        aria-label='tempo'\n        defaultValue={0}\n        getAriaValueText={valuetext}\n        onChange={handleChange}\n        step={1}\n        marks\n        min={0}\n        max={10}\n        valueLabelDisplay=\"auto\"\n      />\n      <Typography gutterBottom>\n        Complexidade\n      </Typography>\n      <Slider\n        aria-label='complexidade'\n        defaultValue={0}\n        getAriaValueText={valuetext}\n        onChange={handleChange}\n        step={1}\n        marks\n        min={0}\n        max={10}\n        valueLabelDisplay=\"auto\"\n      />\n      <Typography gutterBottom>\n        Risco / Incerteza\n      </Typography>\n      <Slider\n        aria-label='risco'\n        defaultValue={0}\n        getAriaValueText={valuetext}\n        onChange={handleChange}\n        step={1}\n        marks\n        min={0}\n        max={10}\n        valueLabelDisplay=\"auto\"\n      />\n      <br />\n      <p>Story Points: <b className=\"spValue\">{handleSum()}</b></p>\n      <small>Cada pilar tem o mesmo valor e estamos a limitar as estimativas até 21, com a regra de Fibonacci</small>\n    </div>\n  );\n}\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}